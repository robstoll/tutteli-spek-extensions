buildscript {
    project.group = 'ch.tutteli.spek'
    rootProject.version = '1.3.0-SNAPSHOT'
    project.description = 'A set of Spek extensions'

    ext {
        // main
        kotlin_version = '1.5.21'

        // test
        spek_version = '2.0.16'
        atrium_version = '0.15.0'
        niok_version = '1.4.3'

        // gradle plugins
        tutteli_plugins_version = '0.33.1'
        detekt_version = '1.17.1'
        sonarqube_version = '3.3'
    }

    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "ch.tutteli:tutteli-gradle-dokka:$tutteli_plugins_version"
        classpath "ch.tutteli:tutteli-gradle-kotlin-module-info:$tutteli_plugins_version"
        classpath "ch.tutteli:tutteli-gradle-kotlin-utils:$tutteli_plugins_version"
        classpath "ch.tutteli:tutteli-gradle-project-utils:$tutteli_plugins_version"
        classpath "ch.tutteli:tutteli-gradle-publish:$tutteli_plugins_version"
        classpath "ch.tutteli:tutteli-gradle-spek:$tutteli_plugins_version"
        classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:$detekt_version"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:$sonarqube_version"
    }
}

apply plugin: "ch.tutteli.project.utils"
apply plugin: 'ch.tutteli.kotlin.utils'
kotlinutils.kotlinVersion = kotlin_version
apply plugin: "org.sonarqube"


repositories {
    maven {
        url 'https://dl.bintray.com/spekframework/spek'
        content {
            includeGroupByRegex 'org\\.spekframework(\\..*)?'
        }
    }
    maven {
        url "https://dl.bintray.com/robstoll/tutteli-jars"
        content {
            includeGroupByRegex 'ch\\.tutteli(\\..*)?'
        }
    }
    mavenCentral()
    jcenter()
}

apply plugin: 'kotlin'
apply plugin: 'ch.tutteli.dokka'
apply plugin: 'ch.tutteli.kotlin.module.info'
apply plugin: 'ch.tutteli.publish'
apply plugin: 'ch.tutteli.spek'

sourceCompatibility = 8
targetCompatibility = 8

dependencies {
    implementation "org.spekframework.spek2:spek-dsl-jvm:$spek_version", excludeKotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    testImplementation "ch.tutteli.atrium:atrium-cc-en_GB-robstoll:$atrium_version", excludeKotlin
    testImplementation "ch.tutteli.niok:niok:$niok_version", excludeKotlin
}

apply plugin: "io.gitlab.arturbosch.detekt"
detekt {
    failFast = true
    config = files("$rootProject.projectDir/gradle/scripts/detekt.yml")
    reports {
        xml.enabled = true
    }
}

sonarqube {
    properties {
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.organization', 'robstoll-github'
        property 'sonar.projectKey', 'robstoll_tutteli-spek-extensions'
        property 'sonar.projectVersion', rootProject.version
        property 'sonar.kotlin', 'detekt.reportPaths=build/reports/detekt/detekt.xml'
        property 'sonar.sources', 'src/main/kotlin'
        property 'sonar.tests', 'src/test/kotlin'
        property 'sonar.coverage', 'jacoco.xmlReportPaths=build/reports/jacoco/report.xml'
        property 'sonar.verbose', 'true'
    }
}
tasks.named("sonarqube").configure {
    dependsOn(tasks.named("detekt"))
}

/*

Release & deploy a commit
--------------------------------
export SPEK_EXTENSION_PREVIOUS_VERSION=1.2.1
export SPEK_EXTENSION_VERSION=1.3.0
find ./ -name "*.md" | xargs perl -0777 -i \
   -pe "s@$SPEK_EXTENSION_PREVIOUS_VERSION@$SPEK_EXTENSION_VERSION@g;" \
   -pe "s@tree/master@tree/v$SPEK_EXTENSION_VERSION@g;";
perl -0777 -i \
  -pe "s@$SPEK_EXTENSION_PREVIOUS_VERSION@$SPEK_EXTENSION_VERSION@g;" \
  -pe "s/rootProject.version = '$SPEK_EXTENSION_VERSION-SNAPSHOT'/rootProject.version = '$SPEK_EXTENSION_VERSION'/;" \
  ./build.gradle
perl -0777 -i \
  -pe "s@$SPEK_EXTENSION_PREVIOUS_VERSION@$SPEK_EXTENSION_VERSION@g;" \
  -pe 's/(<!-- for master -->\n)\n([\S\s]*?)(\n<!-- for a specific release -->\n)<!--\n([\S\s]*?)-->\n(\n# Tutteli spek extension)/$1<!--\n$2-->$3\n$4\n$5/;' \
  ./README.md
git commit -a -m "v$SPEK_EXTENSION_VERSION"

1. change search for X.Y.Z-SNAPSHOT and change to X.Y.Z
2. search for current version and replace with new
3. update master:
    a) point to the tag
        1) update badge versions
        2) search for `tree/master` and replace it with `tree/vX.Y.Z` (README.md)
    b) commit (modified build.gradle, README.md) c) git tag vX.Y.Z
    d) git push origin vX.Y.Z
4. deploy to bintray:
    a) java -version 2>&1 | grep "version \"11" && CI=true gr clean publishToBintray
    b) Log in to bintray, check that there are 10 artifacts and publish new jars
5. create release on github

Prepare next dev cycle
-----------------------

export SPEK_EXTENSION_VERSION=1.2.1
export SPEK_EXTENSION_NEXT_VERSION=1.3.0
find ./ -name "*.md" | xargs perl -0777 -i \
   -pe "s@tree/v$SPEK_EXTENSION_VERSION@tree/master@g;";
perl -0777 -i \
  -pe "s/rootProject.version = '$SPEK_EXTENSION_VERSION'/rootProject.version = '$SPEK_EXTENSION_NEXT_VERSION-SNAPSHOT'/;" \
  -pe "s/SPEK_EXTENSION_VERSION=$SPEK_EXTENSION_VERSION/SPEK_EXTENSION_VERSION=$SPEK_EXTENSION_NEXT_VERSION/;" \
  ./build.gradle
perl -0777 -i \
  -pe 's/(<!-- for master -->\n)<!--\n([\S\s]*?)-->(\n<!-- for a specific release -->)\n([\S\s]*?)\n(\n# Tutteli spek extension)/$1\n$2$3\n<!--$4-->\n$5/;' \
  ./README.md
git commit -a -m "prepare dev cycle of $SPEK_EXTENSION_NEXT_VERSION"

1. change version in build.gradle to X.Y.Z-SNAPSHOT
2. point to master
   a) search for `tag=vX.Y.Z` and replace it with `branch=master`
   b) search for `tree/vX.Y.Z` and replace it with `tree/master`
3. commit & push changes

*/
